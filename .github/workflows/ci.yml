name: CI Pipeline

# Trigger the workflow on push to main/develop and all pull requests
on:
  push:
    branches: [ main ]

  pull_request:
    branches: [ main ]

# Cancel in-progress workflows when a new one starts (saves resources)
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Code Quality & Testing
  test:
    name: üß™ Test & Lint
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v5

      # Step 2: Set up Nodejs
      - name: Setup Node.js and Dependencies
        uses: ./.github/setup-node

      # Step 2: Run linting (code style & quality)
      - name: Run Biome
        run: npm run lint

      # Step 3: Run type checking
      - name: TypeScript check
        run: npm run build

      # Step 4: Run tests with coverage
      - name: Run tests
        run: npm run test:cov

      # Step 5: Upload test coverage to GitHub
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30

  # Job 2: Security Scanning
  security:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v5

      # Step 2: Set up Nodejs
      - name: Setup Node.js and Dependencies
        uses: ./.github/setup-node

      # Step 3: Audit npm packages for vulnerabilities
      - name: Audit npm packages
        run: npm audit --audit-level=high
        continue-on-error: true

      # Step 4: Run CodeQL analysis (GitHub's semantic code analysis)
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: typescript
          config: |
            name: "CodeQL Config"
            queries:
              - uses: security-and-quality
              - uses: security-extended
            paths-ignore:
              - "**/*.test.ts"
              - "**/*.spec.ts"
              - "**/node_modules/**"
              - "**/dist/**"
              - "**/coverage/**"
              - "**/uploads/**"
            paths:
              - "src/**"
          build-mode: none

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:typescript"
          upload: true

  # Job 3: Docker Build Test
  docker-test:
    name: üê≥ Docker Build Test
    runs-on: ubuntu-latest
    needs: test

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v5

      # Step 1.5: Cache Docker images for services
      - name: Cache Docker images
        uses: actions/cache@v4
        with:
          path: /tmp/docker-images
          key: docker-images-${{ hashFiles('.github/workflows/ci.yml') }}
          restore-keys: |
            docker-images-

      # Step 1.6: Load cached images or pull fresh
      - name: Load or pull service images
        run: |
          mkdir -p /tmp/docker-images

          # Try to load cached images
          if [ -f /tmp/docker-images/postgres.tar ]; then
            echo "Loading cached PostgreSQL image..."
            docker load < /tmp/docker-images/postgres.tar
          else
            echo "Pulling PostgreSQL image..."
            docker pull postgres:15-alpine
            docker save postgres:15-alpine > /tmp/docker-images/postgres.tar
          fi

          if [ -f /tmp/docker-images/redis.tar ]; then
            echo "Loading cached Redis image..."
            docker load < /tmp/docker-images/redis.tar
          else
            echo "Pulling Redis image..."
            docker pull redis:7-alpine
            docker save redis:7-alpine > /tmp/docker-images/redis.tar
          fi

          echo "Service images ready"

      # Step 2: Build Docker image (without pushing)
      - name: Build Docker image
        uses: ./.github/docker-build
        with:
          push: false
          tags: api-test:latest
          platforms: linux/amd64

      # Step 3: Test the built image
      - name: Test Docker image
        run: |
          # Debug: Show available Docker images
          echo "=== Available Docker images ==="
          docker images

          # Run the API container with connection to service containers
          docker compose up -d

          # Wait for application to start
          echo "Waiting for application to start..."
          sleep 15

          # Test the health endpoint
          echo "Testing application health endpoint..."
          curl -f http://localhost:3000/api/v1/health || {
            echo "Health check failed"
            docker logs api-test
            exit 1
          }

          echo "‚úÖ Docker image test successful!"

      # Step 4: Cleanup
      - name: Cleanup test container
        if: always()
        run: |
          docker compose down -v
          docker compose rm -f

  # Job 4: Dependency Check
  dependency-check:
    name: üì¶ Dependency Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js without dependencies
        uses: ./.github/setup-node
        with:
          install-deps: false

      # Check for outdated packages
      - name: Check outdated packages
        run: |
          npm outdated || true

      # Generate dependency tree
      - name: Generate dependency tree
        run: |
          npm list --depth=0 > dependency-tree.txt
          cat dependency-tree.txt

      - name: Upload dependency report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-analysis
          path: dependency-tree.txt
          retention-days: 30

  # Job 5: Performance & Size Analysis
  build-analysis:
    name: üìä Build Analysis
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js and Dependencies
        uses: ./.github/setup-node

      - name: Build application
        run: npm run build

      # Analyze build size
      - name: Analyze build size
        run: |
          echo "=== Build Size Analysis ===" > build-analysis.txt
          echo "Build directory size:" >> build-analysis.txt
          du -sh dist/ >> build-analysis.txt
          echo "" >> build-analysis.txt
          echo "Largest files in build:" >> build-analysis.txt
          find dist/ -type f -exec ls -la {} \; | sort -k5 -nr | head -10 >> build-analysis.txt

          # Display the analysis
          cat build-analysis.txt

      - name: Upload build analysis
        uses: actions/upload-artifact@v4
        with:
          name: build-analysis
          path: |
            build-analysis.txt
            dist/
          retention-days: 30

  # Job 6: Final Status
  ci-complete:
    name: ‚úÖ CI Complete
    runs-on: ubuntu-latest
    needs: [test, security, docker-test, dependency-check, build-analysis]
    if: always()

    steps:
      - name: Check CI Status
        run: |
          echo "=== CI Pipeline Results ==="
          echo "Test Job: ${{ needs.test.result }}"
          echo "Security Job: ${{ needs.security.result }}"
          echo "Docker Test Job: ${{ needs.docker-test.result }}"
          echo "Dependency Check Job: ${{ needs.dependency-check.result }}"
          echo "Build Analysis Job: ${{ needs.build-analysis.result }}"

          # Fail if critical jobs failed
          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "‚ùå Tests failed - this is critical!"
            exit 1
          fi

          if [[ "${{ needs.docker-test.result }}" != "success" ]]; then
            echo "‚ùå Docker build failed - this is critical!"
            exit 1
          fi

          echo "‚úÖ CI Pipeline completed successfully!"
