name: CI Pipeline

# Trigger the workflow on push to main/develop and all pull requests
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Cancel in-progress workflows when a new one starts (saves resources)
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/${{ github.repository }}

jobs:
  # Job 1: Code Quality & Testing
  test:
    name: üß™ Test & Lint
    runs-on: ubuntu-latest

    steps:
      # Step 1: Set up Nodejs
      - name: Setup Node.js and Dependencies
        uses: ./.github/setup-node

      # Step 2: Run linting (code style & quality)
      - name: Run ESLint
        run: npm run lint

      # Step 3: Run type checking
      - name: TypeScript check
        run: npm run build

      # Step 4: Run tests with coverage
      - name: Run tests
        run: npm run test:cov

      # Step 5: Upload test coverage to GitHub
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30

  # Job 2: Security Scanning
  security:
    name: üîí Security Scan
    runs-on: ubuntu-latest

    steps:
      # Step 1: Set up Nodejs
      - name: Setup Node.js and Dependencies
        uses: ./.github/setup-node.yml

      # Step 2: Audit npm packages for vulnerabilities
      - name: Audit npm packages
        run: npm audit --audit-level=high
        continue-on-error: true

      # Step 3: Run CodeQL analysis (GitHub's semantic code analysis)
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: typescript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Job 3: Docker Build Test
  docker-test:
    name: üê≥ Docker Build Test
    runs-on: ubuntu-latest
    needs: test

    steps:
      # Step 1: Build Docker image (without pushing)
      - name: Build Docker image
        uses: ./.github/docker-build
        with:
          push: false
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test
          platforms: linux/amd64

      # Step 3: Test the built image
      - name: Test Docker image
        env:
          IMAGE_NAME: test-image
          CONTAINER_NAME: test-container
          PORT: 3000
          HEALTH_ENDPOINT: http://localhost:3000/api/v1/health
        run: |
          # Build the image locally for testing
          docker build -t ${{env.IMAGE_NAME}} .

          # Run a quick test to ensure the image works
          docker run --rm --name ${{env.CONTAINER_NAME}} -d -p ${{env.PORT}}:${{env.PORT}} ${{env.IMAGE_NAME}}

          # Wait a moment for the app to start
          sleep 10

          # Test if the app responds (using docker network)
          docker exec ${{env.CONTAINER_NAME}} wget --quiet --spider ${{env.HEALTH_ENDPOINT}} || exit 1

          # Cleanup
          docker stop ${{env.CONTAINER_NAME}}

  # Job 4: Dependency Check
  dependency-check:
    name: üì¶ Dependency Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Setup Node.js without dependencies
      uses: ./.github/setup-node
      with:
        install-deps: false

    # Check for outdated packages
    - name: Check outdated packages
      run: |
        npm outdated || true

    # Generate dependency tree
    - name: Generate dependency tree
      run: |
        npm list --depth=0 > dependency-tree.txt
        cat dependency-tree.txt

    - name: Upload dependency report
      uses: actions/upload-artifact@v4
      with:
        name: dependency-analysis
        path: dependency-tree.txt
        retention-days: 30

  # Job 5: Performance & Size Analysis
  build-analysis:
    name: üìä Build Analysis
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Setup Node.js and Dependencies
      uses: ./.github/actions/setup-node-deps

    - name: Build application
      run: npm run build

    # Analyze build size
    - name: Analyze build size
      run: |
        echo "=== Build Size Analysis ===" > build-analysis.txt
        echo "Build directory size:" >> build-analysis.txt
        du -sh dist/ >> build-analysis.txt
        echo "" >> build-analysis.txt
        echo "Largest files in build:" >> build-analysis.txt
        find dist/ -type f -exec ls -la {} \; | sort -k5 -nr | head -10 >> build-analysis.txt

        # Display the analysis
        cat build-analysis.txt

    - name: Upload build analysis
      uses: actions/upload-artifact@v4
      with:
        name: build-analysis
        path: |
          build-analysis.txt
          dist/
        retention-days: 30

  # Job 6: Final Status
  ci-complete:
    name: ‚úÖ CI Complete
    runs-on: ubuntu-latest
    needs: [test, security, docker-test, dependency-check, build-analysis]
    if: always()

    steps:
    - name: Check CI Status
      run: |
        echo "=== CI Pipeline Results ==="
        echo "Test Job: ${{ needs.test.result }}"
        echo "Security Job: ${{ needs.security.result }}"
        echo "Docker Test Job: ${{ needs.docker-test.result }}"
        echo "Dependency Check Job: ${{ needs.dependency-check.result }}"
        echo "Build Analysis Job: ${{ needs.build-analysis.result }}"

        # Fail if critical jobs failed
        if [[ "${{ needs.test.result }}" != "success" ]]; then
          echo "‚ùå Tests failed - this is critical!"
          exit 1
        fi

        if [[ "${{ needs.docker-test.result }}" != "success" ]]; then
          echo "‚ùå Docker build failed - this is critical!"
          exit 1
        fi

        echo "‚úÖ CI Pipeline completed successfully!"
